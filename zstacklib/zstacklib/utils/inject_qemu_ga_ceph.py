'''@author: mingjian'''import cryptimport osfrom zstacklib.utils import logfrom zstacklib.utils import shelllogger = log.get_logger(__name__)class InjectQemuGa(object):    def __init__(self):        self.inject_path = None        self.local_path = None    def _get_err(self, word):        return 'failed inject qemu-ga due to: %s' % word    def _get_arch(self):        bit_str = shell.call('file bin/ls').strip()        bit_sub_str = bit_str[bit_str.find('ELF '):]        logger.debug("bit_sub_str is: %s" % bit_sub_str)        arch = {            "32-bit": lambda: "i386",            "64-bit": lambda: "x86_64",        }        try:            arch = arch[bit_sub_str[4:10]]()        except KeyError:            raise Exception(self._get_err('only support 32-bit or 64-bit, but found %s' % bit_sub_str[4:10]))        return arch    def _get_version_and_arch(self):        if os.path.isfile('etc/system-release'):            info = shell.call('cat etc/system-release').strip()        elif os.path.isfile('etc/issue'):            info = shell.call('cat etc/issue').strip()        else:            raise Exception(self._get_err('OSVersion is unkown or not supported!'))        logger.debug('info is: %s' % info)        os_type = None        major = None        arch = self._get_arch()        if 'CentOS' in info:            os_type = 'centos'            if 'release 7.' in info:                major = 'centos7.x'            elif 'release 6.' in info:                major = 'centos6.x'        elif 'Ubuntu' in info:            os_type = 'ubuntu'            if arch == 'i386':                raise Exception(self._get_err('%s is not supported under ubuntu' % arch))            if '16' in info or '15' in info:                major = 'ubuntu16.x'            elif '14' in info or '13' in info or '12' in info:                major = 'ubuntu14.x'        if os_type is None or major is None:            raise Exception(self._get_err('OSVersion %s cannot be supported!' % info))        logger.debug('os_type: %s, major: %s, arch: %s' % (os_type, major, arch))        return os_type, major, arch    def _inject_by_version_and_arch(self):        os_type, major, arch = self._get_version_and_arch()        src_path = os.path.join(self.local_path, os_type, arch, major)        shell.call('/bin/cp -R %s/* %s' % (src_path, '.'))    def inject_qemuGa(self):        logger.debug('start inject qemu-ga.')        self._inject_by_version_and_arch()        logger.debug('successful inject qemu-ga in mount dir.')